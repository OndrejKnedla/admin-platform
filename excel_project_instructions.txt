# System Resource Monitoring Dashboard - Excel Project Instructions

## Overview
This document provides step-by-step instructions for creating a professional System Resource Monitoring Dashboard in Excel. This project demonstrates advanced Excel skills including data analysis, visualization, conditional formatting, and dashboard creation.

## Project Structure
1. Raw Data Sheet - Contains imported system monitoring data
2. Analysis Sheet - Contains calculations and data processing
3. Charts Sheet - Contains visualizations of the data
4. Dashboard Sheet - Main interface with summary metrics and interactive elements

## Step 1: Import and Format the Data
1. Open Excel and create a new workbook
2. Go to Data tab > Get Data > From File > From Text/CSV
3. Select the system_data.csv file
4. In the import wizard, ensure data types are correctly detected
5. Load the data to a new sheet named "Raw Data"
6. Format the data as a table (Ctrl+T) for easier reference
7. Name the table "SystemData" (Table Design tab > Table Name)

## Step 2: Create the Analysis Sheet
1. Create a new sheet named "Analysis"
2. Create summary statistics:
   - Calculate daily averages for each metric using AVERAGEIF
   - Calculate maximum values using MAXIFS
   - Calculate minimum values using MINIFS
   - Identify peak usage times using INDEX/MATCH combinations
   - Calculate growth rates using percentage changes

3. Add these formulas:
   - Average CPU Usage: =AVERAGEIFS(SystemData[CPU_Usage],SystemData[Date],"="&$A2)
   - Max Memory Usage: =MAXIFS(SystemData[Memory_Usage],SystemData[Date],"="&$A2)
   - Peak Hour: =INDEX(SystemData[Time],MATCH(MAX(IF(SystemData[Date]=$A2,SystemData[CPU_Usage])),IF(SystemData[Date]=$A2,SystemData[CPU_Usage]),0))
   - Resource Utilization: =(AVERAGEIFS(SystemData[CPU_Usage],SystemData[Date],"="&$A2)+AVERAGEIFS(SystemData[Memory_Usage],SystemData[Date],"="&$A2))/2

4. Create threshold calculations:
   - CPU Warning: =IF(AVERAGEIFS(SystemData[CPU_Usage],SystemData[Date],"="&$A2)>70,"Warning","OK")
   - Memory Warning: =IF(AVERAGEIFS(SystemData[Memory_Usage],SystemData[Date],"="&$A2)>60,"Warning","OK")
   - Disk Warning: =IF(AVERAGEIFS(SystemData[Disk_Usage],SystemData[Date],"="&$A2)>80,"Warning","OK")

## Step 3: Create the Charts Sheet
1. Create a new sheet named "Charts"
2. Create the following charts:
   - Line chart showing CPU, Memory, and Disk usage over time
   - Bar chart comparing daily average resource usage
   - Pie chart showing distribution of resource usage
   - Area chart showing network traffic patterns
   - Scatter plot showing correlation between CPU usage and system temperature

3. Format all charts with:
   - Clear titles
   - Appropriate axis labels
   - Data labels where needed
   - Consistent color scheme
   - Legends

## Step 4: Create the Dashboard Sheet
1. Create a new sheet named "Dashboard"
2. Design a professional layout with:
   - Title and company logo area
   - Summary metrics section with KPIs
   - Mini charts section
   - Alert/warning section
   - Date filter control

3. Add these elements:
   - Current date display: =TODAY()
   - System status indicator: =IF(COUNTIFS(Analysis[CPU Warning],"Warning")>0,"System Under Stress","System Normal")
   - Resource usage gauges using conditional formatting data bars
   - Top 3 metrics to watch using LARGE function
   - Trend indicators using sparklines

4. Add interactivity:
   - Date slicer connected to PivotCharts
   - Dropdown for selecting different metrics
   - Buttons to navigate between sheets
   - Refresh data button

## Step 5: Add Advanced Features
1. Create a macro to refresh all data (Alt+F11 to open VBA editor):
```vba
Sub RefreshAllData()
    ActiveWorkbook.RefreshAll
    MsgBox "Data refreshed successfully!", vbInformation
End Sub
```

2. Add conditional formatting:
   - Color scales for usage metrics
   - Icon sets for status indicators
   - Data bars for visual comparison

3. Add data validation:
   - Dropdown lists for filtering
   - Input validation for any user entry fields

4. Create a print-ready report view:
   - Set print area
   - Add headers and footers
   - Set page orientation and scaling

## Step 6: Document and Test
1. Add a documentation sheet explaining how to use the dashboard
2. Test all interactive elements
3. Verify all calculations are correct
4. Ensure the dashboard works with different data sets

## Final Touches
1. Password protect sheets with formulas
2. Create a welcome screen with instructions
3. Add your name and contact information
4. Save as a macro-enabled workbook (.xlsm)

This Excel project demonstrates:
- Advanced formula usage
- Data analysis capabilities
- Professional visualization skills
- Dashboard design
- VBA programming
- Attention to detail and documentation

These skills directly align with the job requirements for data analysis in Excel and preparing reports at a professional level.
